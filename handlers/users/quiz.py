from aiogram import types
from keyboards.default.start import start_button, start_staj_button
from loader import dp
from states.state import StateBot
from keyboards.inline.question import *
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InputFile
import matplotlib.pyplot as plt
import psycopg2
from data.config import *

con = psycopg2.connect(
        database="d2hrrbu1311r1b",
        user="gahdttwnarszcm",
        password="f45246e187465ddb5c8e20b62092434faf8d59cbd6404e71d36a536a983a8af1",
        host="ec2-18-214-134-226.compute-1.amazonaws.com",
        port=5432
    )

cur = con.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS PLAYERS
     (ID SERIAL PRIMARY KEY,
     TG_ID BIGINT NOT NULL UNIQUE,
     NAME VARCHAR (100) NULL,
     PROG_COUNT BIGINT DEFAULT 0,
     TESTER_COUNT BIGINT DEFAULT 0,
     ANALYSE_COUNT BIGINT DEFAULT 0,
     ADMIN_COUNT BIGINT DEFAULT 0,
     PROFESSION VARCHAR (100),
     FINISH VARCHAR (100));''')

con.commit()

@dp.message_handler(text='üö™–ù–∞—á–∞—Ç—åüö™', state=StateBot.In_Question)
async def bot_quiz(message: types.Message):
    id = [message.from_user.id]
    cur.execute("SELECT * FROM PLAYERS WHERE TG_ID = %s", id)
    flag = cur.fetchall()
    if len(flag) > 0:
        print("–µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ")
    else:
        data = [message.from_user.id, message.from_user.full_name]
        cur.execute(
            "INSERT INTO PLAYERS (TG_ID, NAME) VALUES(%s, %s)",
            data)
        con.commit()
        print("–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–∑—É")

    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await message.answer_photo(photo=phbot,
                                   caption=f"–í—ã —Ä–æ–¥–∏–ª–∏—Å—å —Å –∏–º–µ–Ω–µ–º {message.from_user.full_name} üéÇ . –í –¥–µ—Ç—Å—Ç–≤–µ –≤—ã –±—ã–ª–∏ –æ–±—ã—á–Ω—ã–º —Å–∫—Ä–æ–º–Ω—ã–º —Ä–µ–±–µ–Ω–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ª—é–±–∏–ª –¥—Ä–∞—Ç—å—Å—è –∏ —á–∞—Å—Ç–æ –ø–ª–∞–∫–∞–ª –ø–æ –ø—É—Å—Ç—è–∫–∞–º.üöº \n\n–í –æ–¥–∏–Ω –∏–∑ –æ–±—ã—á–Ω—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π, –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ –º–µ—Å—Ç–Ω—ã—Ö —Ö—É–ª–∏–≥–∞–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º–æ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ, —É –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∑–¥–æ—Ä–æ–≤–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è.üò± \n\n–ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø—Ä–∏–º–∏—Ç–µ?\n\n –í–ê–ñ–ù–û: –ö–∞–∂–¥—ã–π –≤–∞—à –≤—ã–±–æ—Ä –≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Ç–æ–≥ —Å—é–∂–µ—Ç–∞")
    with open('photo.png', 'rb') as photo:
        ph = photo.read()
        await message.answer_photo(photo=ph,reply_markup=question1)


    cur.execute("UPDATE PLAYERS SET PROG_COUNT=0, TESTER_COUNT=0, ANALYSE_COUNT=0, ADMIN_COUNT=0, PROFESSION=null, FINISH=null WHERE TG_ID=%s", id)
    con.commit()
    print("succesful")

@dp.callback_query_handler(text = ["answer1", "answer2","answer3","answer4"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]
    if call.data == 'answer1':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await call.message.answer_photo(photo=phbot,
                                   caption="–ö–∞–∫–∏–º –±—ã –¥–µ—Ç—Å—Ç–≤–æ –Ω–µ –±—ã–ª–æ –±–µ–∑–∑–∞–±–æ–Ω—ã–º –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º - –æ–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –∏ –≤—ã –ø–æ—à–ª–∏ –≤ —à–∫–æ–ª—Éüè´\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—É—á–∞—è—Å—å 7 –∫–ª–∞—Å—Å–æ–≤, –ø—Ä–æ–∏–∑–æ—à–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π. –ù–∞ –±–∏–æ–ª–æ–≥–∏–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å—Ü–µ–Ω–∫—É –ø—Ä–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —á–µ—Ç–≤–µ—Ä—Ç–∏ (—Ü–∏—Ç–æ–≥–µ–Ω–µ–∑, –ø–µ—Å—Ç–∏–∫–∏-—Ç—ã—á–∏–Ω–∫–∏, –±–µ—Å–ø–æ–∑–≤–æ–Ω–æ—á–Ω—ã–µ).üé¨ \n\n–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç–µ?")
    with open('photo2.jpg', 'rb') as photo2:
        ph2 = photo2.read()
        await call.message.answer_photo(photo=ph2,reply_markup=question2)

    await call.message.delete()


@dp.callback_query_handler(text = ["answer1.1", "answer2.1","answer3.1","answer4.1"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]
    if call.data == 'answer1.1':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2.1':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3.1':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4.1':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await call.message.answer_photo(photo=phbot,
                                   caption="–ò –≤–æ—Ç —É–∂–µ 9 –∫–ª–∞—Å—Å, –∞ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –∏ –û–ì–≠ –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏. \n\n–ö–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –±—É–¥–µ—Ç–µ?")
    with open('photo3.jpg', 'rb') as photo3:
        ph3 = photo3.read()
        await call.message.answer_photo(photo=ph3,reply_markup=question3)

    await call.message.delete()


@dp.callback_query_handler(text = ["answer1.2", "answer2.2","answer3.2","answer4.2"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]
    if call.data == 'answer1.2':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2.2':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3.2':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4.2':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await call.message.answer_photo(photo=phbot,
                                   caption="–í—ã –º–æ–ª–æ–¥–µ—Ü, —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —à–∫–æ–ª—É —Å –≤—Å–µ–≥–æ –æ–¥–Ω–æ–π —á–µ—Ç–≤–µ—Ä–∫–æ–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—Éüéì –í—ã –ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–ª–ª–µ–¥–∂ –∏ —Ç–∞–º –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∏–≥—Ä–∞—Ç—å –≤ –ö–í–ù. –ö–∞–∫—É—é —Ä–æ–ª—å –≤–æ–∑—å–º–µ—Ç–µü§π?")
    with open('photox.png', 'rb') as photox:
        phx = photox.read()
        await call.message.answer_photo(photo=phx,reply_markup=question4)

    await call.message.delete()


@dp.callback_query_handler(text = ["answer1.3", "answer2.3","answer3.3","answer4.3"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]
    if call.data == 'answer1.3':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2.3':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3.3':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4.3':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await call.message.answer_photo(photo=phbot,
                                        caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–≤–∞–ª–∏–ª–∏ –æ–¥–∏–Ω —ç–∫–∑–∞–º–µ–Ω –≤ –∫–æ–ª–ª–µ–¥–∂–µüìâ. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—åü§î?")
    with open('photo4.jpg', 'rb') as photo4:
        ph4 = photo4.read()
        await call.message.answer_photo(photo=ph4, reply_markup=question5)

    await call.message.delete()

@dp.callback_query_handler(text = ["answer1.4", "answer2.4","answer3.4","answer4.4"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]
    if call.data == 'answer1.4':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2.4':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3.4':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4.4':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await call.message.answer_photo(photo=phbot,
                                        caption="–ò –≤–æ—Ç, —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω—ã 4 –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–¥–∂–µ‚è≥ \n\n–¢–µ–ø–µ—Ä—å –∫–∞–∫ –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –≤—ã —Ä–µ—à–∞–µ—Ç–µ—Å—å –ø–æ–¥–∞—Ç—å —Ä–µ–∑—é–º–µ –≤ –æ–¥–Ω—É –∫–æ–º–ø–∞–Ω–∏—é. –ò –Ω–µ –∑—Ä—è, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. \n–ö–∞–∫ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ –Ω–µ–º—Éüï¥?")
    with open('photo5.png', 'rb') as photo5:
        ph5 = photo5.read()
        await call.message.answer_photo(photo=ph5, reply_markup=question6)

    await call.message.delete()

@dp.callback_query_handler(text = ["answer1.5", "answer2.5","answer3.5","answer4.5"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]
    if call.data == 'answer1.5':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2.5':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3.5':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4.5':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    with open('robotic.png', 'rb') as photobot:
        phbot = photobot.read()
        await call.message.answer_photo(photo=phbot,caption="–í–∞—Å —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—Éüéâ –£—Å–µ—Ä–¥–Ω–æ —Ç—Ä—É–¥—è—Å—å, –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –∑–∞—Å–ª—É–∂–∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏ –ø—Ä–æ—Å–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ–± —ç—Ç–æ–º. \n\n–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç–µ –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")
    with open('photo6.png', 'rb') as photo6:
        ph6 = photo6.read()
        await call.message.answer_photo(photo=ph6, reply_markup=question7)

    await call.message.delete()

@dp.callback_query_handler(text = ["answer1.6", "answer2.6","answer3.6","answer4.6"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    id = [call.from_user.id]

    await call.message.answer("–ü–æ-–∏—Ç–æ–≥—É, –≤–∞—Å —Å–æ–∫—Ä–∞—Ç–∏–ª–∏ –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–∞–º–ø–∞–Ω–∏–∏üôÅ –ü–æ—Å–ª–µ –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ, –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–∏–ª –Ω–∞ –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.")

    if call.data == 'answer1.6':
        cur.execute("UPDATE PLAYERS SET PROG_COUNT = PROG_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer2.6':
        cur.execute("UPDATE PLAYERS SET TESTER_COUNT = TESTER_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer3.6':
        cur.execute("UPDATE PLAYERS SET ANALYSE_COUNT = ANALYSE_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    if call.data == 'answer4.6':
        cur.execute("UPDATE PLAYERS SET ADMIN_COUNT = ADMIN_COUNT + 1 WHERE TG_ID = %s", id)
        con.commit()
    id = [call.from_user.id]
    cur.execute("SELECT PROG_COUNT,TESTER_COUNT, ANALYSE_COUNT, ADMIN_COUNT FROM PLAYERS where TG_ID=%s;", id)
    datas = cur.fetchall()
    prog = datas[0][0]
    test = datas[0][1]
    anal = datas[0][2]
    admin = datas[0][3]
    # print(f"{prog} -  {type(prog)}")
    labels = '–û—Ç–≤–µ—Ç—ã –∑–∞ \n\n–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞\n', '–û—Ç–≤–µ—Ç—ã –∑–∞ \n\n—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞\n', '–û—Ç–≤–µ—Ç—ã –∑–∞ \n\n–∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n', '–û—Ç–≤–µ—Ç—ã –∑–∞ \n\n–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'

    values = [prog, test, anal, admin]
    fig1, ax1 = plt.subplots()
    ax1.pie(values, labels=labels, autopct='%1.2f%%')
    ax1.axis('equal')
    plt.savefig('saved_figure.png')
    photo = InputFile("saved_figure.png")
    if prog == max(prog, test, anal, admin):
        print(prog)
        print(call.from_user.full_name)
        await call.message.answer_photo(photo=photo, caption='–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Å—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—åüö™"', reply_markup=start_button)

        await StateBot.In_choice_prog.set()
    elif test == max(prog, test, anal, admin):
        print(test)
        await call.message.answer_photo(photo=photo,caption='–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞. –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ, –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—åüö™"', reply_markup=start_button)
        await StateBot.In_choice_tester.set()
    elif anal == max(prog, test, anal, admin):
        print(anal)
        await call.message.answer_photo(photo=photo,caption='–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ, –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—åüö™"', reply_markup=start_button)
        await StateBot.In_choice_an.set()
    elif admin == max(prog, test, anal, admin):
        print(admin)
        await call.message.answer_photo(photo=photo, caption='–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ, –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—åüö™"', reply_markup=start_button)
        await StateBot.In_choice_adm.set()

@dp.message_handler(text='üö™–ù–∞—á–∞—Ç—åüö™', state=StateBot.In_choice_prog)
async def bot_soru_aska_langly(message: types.Message):
    await message.answer("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –≤—Å—Ç–∞–ª –≤–æ–ø—Ä–æ—Å - –∫–∞–∫–æ–π —Å—Ç–µ–∫ –≤—ã–±—Ä–∞—Ç—å?", reply_markup=dop)
    await StateBot.In_Question.set()

@dp.callback_query_handler(text = ["web", "desktop","mobile"], state=StateBot.In_Question)
async def bot_quiz(call: CallbackQuery, state: FSMContext):
    if call.data == 'web':
        await StateBot.In_choice_web.set()
        await call.message.answer('–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Å—Ç–∞–ª–∏ –≤–µ–±-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—Éüö™"', reply_markup=start_staj_button)
    if call.data == 'desktop':
        await StateBot.In_choice_des.set()
        await call.message.answer('–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Å—Ç–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –¥–µ—Å–∫—Ç–æ–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—Éüö™"',reply_markup=start_staj_button)
    if call.data == 'mobile':
        await StateBot.In_choice_mob.set()
        await call.message.answer('–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –≤—ã —Å—Ç–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ "üö™–ù–∞—á–∞—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—Éüö™"', reply_markup=start_staj_button)
    await call.message.delete()
